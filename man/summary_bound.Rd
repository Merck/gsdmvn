% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summary_bound.R
\name{summary_bound}
\alias{summary_bound}
\title{This is the function to generate a R table summarizing the bounds
in the group sequential design generated by
\code{gs_design_ahr} or \code{gs_design_wlr} or \code{gs_design_combo}.}
\usage{
summary_bound(
  x,
  method = NULL,
  analysis_vars = NULL,
  analysis_decimals = NULL,
  bound_names = c("Efficacy", "Futility")
)
}
\arguments{
\item{x}{an object returned by  \code{gs_design_ahr} or \code{gs_design_wlr} or \code{gs_design_combo}}

\item{method}{the method used to generate x. It should be one of \code{c("AHR", "WLR", "COMBO")}}

\item{analysis_vars}{the variables to be put at the summary header of each analysis}

\item{analysis_decimals}{the displayed number of digits of \code{analysis_vars}}

\item{bound_names}{names for bounds; default = c("Efficacy", "Futility").}
}
\value{
a data frame summary the bounds of the group sequential design
}
\description{
This is the function to generate a R table summarizing the bounds
in the group sequential design generated by
\code{gs_design_ahr} or \code{gs_design_wlr} or \code{gs_design_combo}.
}
\examples{
# ---------------------------- #
#     design parameters        #
# ---------------------------- #
# enrollment/failure rates
enrollRates <- tibble::tibble(Stratum = "All", 
                              duration = 12, 
                              rate = 1)
failRates <- tibble::tibble(Stratum = "All", duration = c(4, 100), 
                            failRate = log(2) / 12,
                            hr = c(1, .6), 
                            dropoutRate = .001)
# Information fraction
IF <- (1:3)/3 
# Analysis times in months; first 2 will be ignored as IF will not be achieved
analysisTimes <- c(.01, .02, 36)  
# Experimental / Control randomization ratio
ratio <- 1 
# 1-sided Type I error
alpha <- 0.025 
# Type II error (1 - power)
beta <- .1 
# Upper bound
upper <- gsdmvn::gs_spending_bound
upar <- list(sf = gsDesign::sfLDOF, total_spend = 0.025, param = NULL, timing = NULL)
# Lower bound
lower <- gsdmvn::gs_spending_bound
lpar <- list(sf = gsDesign::sfHSD, total_spend = 0.1, param = 0, timing = NULL)
# weight function in WLR
wgt00 <- function(x, arm0, arm1){
  gsdmvn:::wlr_weight_fh(x, arm0, arm1, rho = 0, gamma = 0)}
wgt05 <- function(x, arm0, arm1){
  gsdmvn:::wlr_weight_fh(x, arm0, arm1, rho = 0, gamma = .5)}
# test in COMBO
fh_test <- rbind(
  data.frame(rho = 0, gamma = 0, tau = -1, test = 1, Analysis = 1:3,analysisTimes = c(12, 24, 36)), 
  data.frame(rho = c(0, 0.5), gamma = 0.5, tau = -1, test = 2:3, Analysis = 3, analysisTimes = 36)
)
# ---------------------------- #
#          ahr                 #
# ---------------------------- #
x_ahr <- gs_design_ahr2(
  enrollRates = enrollRates,
  failRates = failRates,
  IF = IF, # Information fraction
  analysisTimes = analysisTimes, 
  ratio = ratio, 
  alpha = alpha, 
  beta = beta, 
  upper = upper,
  upar = upar,
  lower = lower,
  lpar = lpar
  )
summary_bound(x_ahr, method = "AHR")
# ---------------------------- #
#         wlr                  #
# ---------------------------- #
x_wlr2 <- gs_design_wlr2(
  enrollRates = enrollRates,
  failRates = failRates,
  weight = wgt05, 
  IF = NULL, 
  analysisTimes = sort(unique(x_ahr$analysis$Time)), 
  ratio = ratio, 
  alpha = alpha, 
  beta = beta,   
  upper = upper,
  upar = upar,
  lower = lower,
  lpar = lpar
  )
  summary_bound(x_wlr, method = "WLR")
# ---------------------------- #
#         max combo            #
# ---------------------------- #
x_combo <- gsdmvn::gs_design_combo2(
  ratio = 1, 
  alpha = 0.025, 
  beta = 0.2, 
  enrollRates = tibble::tibble(Stratum = "All", duration = 12, rate = 500/12),
  failRates = tibble::tibble(Stratum = "All", duration = c(4, 100), 
                             failRate = log(2) / 15, hr = c(1, .6), dropoutRate = .001), 
  fh_test = fh_test,
  upper = gsdmvn::gs_spending_combo,
  upar = list(sf = gsDesign::sfLDOF, total_spend = 0.025),
  lower = gsdmvn::gs_spending_combo,
  lpar = list(sf = gsDesign::sfLDOF, total_spend = 0.2))
summary_bound(x_combo, method = "COMBO")

}
